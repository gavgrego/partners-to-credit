/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ReferralsImport } from './routes/referrals'
import { Route as IndexImport } from './routes/index'
import { Route as ProgramBankImport } from './routes/program/$bank'

// Create/Update Routes

const ReferralsRoute = ReferralsImport.update({
  id: '/referrals',
  path: '/referrals',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProgramBankRoute = ProgramBankImport.update({
  id: '/program/$bank',
  path: '/program/$bank',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/referrals': {
      id: '/referrals'
      path: '/referrals'
      fullPath: '/referrals'
      preLoaderRoute: typeof ReferralsImport
      parentRoute: typeof rootRoute
    }
    '/program/$bank': {
      id: '/program/$bank'
      path: '/program/$bank'
      fullPath: '/program/$bank'
      preLoaderRoute: typeof ProgramBankImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/referrals': typeof ReferralsRoute
  '/program/$bank': typeof ProgramBankRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/referrals': typeof ReferralsRoute
  '/program/$bank': typeof ProgramBankRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/referrals': typeof ReferralsRoute
  '/program/$bank': typeof ProgramBankRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/referrals' | '/program/$bank'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/referrals' | '/program/$bank'
  id: '__root__' | '/' | '/referrals' | '/program/$bank'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ReferralsRoute: typeof ReferralsRoute
  ProgramBankRoute: typeof ProgramBankRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ReferralsRoute: ReferralsRoute,
  ProgramBankRoute: ProgramBankRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/referrals",
        "/program/$bank"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/referrals": {
      "filePath": "referrals.tsx"
    },
    "/program/$bank": {
      "filePath": "program/$bank.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
